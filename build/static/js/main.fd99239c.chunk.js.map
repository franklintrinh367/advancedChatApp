{"version":3,"sources":["components/NavBar.js","components/Rooms.js","components/Landing.js","components/Users.js","components/ChatWindow.js","components/EventHistory.js","components/ChatHistory.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","className","Link","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Component","Rooms","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleJoin","roomName","socket","d","Date","date","toLocaleDateString","time","toLocaleTimeString","timeStamp","console","log","emit","userName","state","username","renderRooms","rooms","map","room","index","key","scope","name","concat","Button","color","onClick","handleChange","e","setState","target","value","createRoom","on","data","errors","message","success","selectUser","dropdownOpen","innerText","renderUsers","users","user","DropdownItem","toggle","bind","assertThisInitialized","dropDownOpen","_this2","fetch","then","res","json","push","newRoom","ButtonDropdown","direction","isOpen","DropdownToggle","caret","DropdownMenu","placeholder","onChange","Landing","Users","registerUser","newUser","class","ChatWindow","isActiveUser","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","activeUsers","Symbol","iterator","next","done","err","return","removeActiveUser","i","length","splice","getActiveUsers","getEvents","events","event","messageChange","getMessages","messageLog","handleSend","error","match","params","replace","chatHistories","timestamp","eventHistories","unshift","_this3","Container","Row","Col","xs","disabled","EventHistory","renderRoomEvents","renderEvents","Table","striped","ChatHistory","renderRoomChat","renderChats","App","socketIOClient","components_NavBar","Switch","Route","exact","path","component","render","components_Rooms","components_Users","components_ChatWindow","assign","Boolean","window","location","hostname","ReactDOM","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd99239c.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nclass NavBar extends Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <Link className=\"navbar-brand\" to=\"/\">\n          Chat App\n        </Link>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarNavDropdown\"\n          aria-controls=\"navbarNavDropdown\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\" />\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item \">\n              <Link className=\"nav-link\" to=\"/rooms\">\n                Room Chat\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/users\">\n                Users\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/eventHistory\">\n                Event History\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/chatHistory\">\n                Chat History\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    )\n  }\n}\n\nexport default NavBar\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport './Rooms.styles.css'\nimport {\n  Button,\n  ButtonDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n} from 'reactstrap'\n\nclass Rooms extends Component {\n  constructor(props) {\n    super(props)\n\n    this.toggle = this.toggle.bind(this)\n    this.state = {\n      roomName: '',\n      rooms: [],\n      errors: '',\n      success: '',\n      dropDownOpen: false,\n      users: [],\n      username: 'Anonymous',\n    }\n  }\n\n  componentDidMount() {\n    fetch('/room/get/all')\n      .then(res => res.json())\n      .then(rooms => {\n        this.setState({\n          rooms: rooms,\n        })\n      })\n    let { socket } = this.props\n\n    // get all the users\n    fetch('/user/get/all')\n      .then(res => res.json())\n      .then(users => {\n        this.setState({\n          users: users,\n        })\n      })\n\n    socket.on('createSuccess', data => {\n      let { rooms } = this.state\n      rooms.push(data.newRoom)\n      this.setState({\n        rooms: rooms,\n        success: data.message,\n        errors: '',\n      })\n    })\n  }\n\n  handleJoin = roomName => {\n    let { socket } = this.props\n    let d = new Date()\n    let date = d.toLocaleDateString()\n    let time = d.toLocaleTimeString()\n    let timeStamp = date + ' ' + time\n    console.log(roomName)\n    socket.emit('joinRoom', {\n      roomName: roomName,\n      userName: this.state.username,\n      date: date,\n      time: time,\n      timeStamp: timeStamp,\n    })\n  }\n\n  renderRooms = () => {\n    return this.state.rooms.map((room, index) => {\n      return (\n        <tr key={index}>\n          <th scope=\"row\">{index + 1}</th>\n          <td>{room.name}</td>\n          <td>\n            <Link to={`/chat/${room.name}&${this.state.username}`}>\n              <Button color=\"info\" onClick={() => this.handleJoin(room.name)}>\n                Join\n              </Button>\n            </Link>\n          </td>\n        </tr>\n      )\n    })\n  }\n\n  handleChange = e => {\n    this.setState({\n      roomName: e.target.value,\n    })\n  }\n\n  createRoom = () => {\n    let { socket } = this.props\n    let { roomName } = this.state\n\n    socket.emit('createRoom', {\n      name: roomName,\n    })\n\n    socket.on('createFail', data => {\n      this.setState({\n        errors: data.message,\n        success: '',\n      })\n    })\n  }\n\n  toggle() {\n    this.setState({\n      dropdownOpen: !this.state.dropdownOpen,\n    })\n  }\n\n  selectUser = e => {\n    this.setState({\n      dropdownOpen: !this.state.dropdownOpen,\n      username: e.target.innerText,\n    })\n  }\n\n  renderUsers = () => {\n    return this.state.users.map((user, index) => {\n      return (\n        <DropdownItem key={index} onClick={this.selectUser}>\n          {user.name}\n        </DropdownItem>\n      )\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"dropdown-user\">\n          <ButtonDropdown\n            direction=\"right\"\n            isOpen={this.state.dropdownOpen}\n            toggle={this.toggle}\n          >\n            <DropdownToggle caret>Choose a User</DropdownToggle>\n            <DropdownMenu>{this.renderUsers()}</DropdownMenu>\n          </ButtonDropdown>\n        </div>\n        <div className=\"ml-100\">\n          <h2>\n            You will be joining a room as <b> {this.state.username}</b>\n          </h2>\n        </div>\n\n        <table className=\"table rooms-table-container\">\n          <thead className=\"thead-dark\">\n            <tr>\n              <th scope=\"col\">#</th>\n              <th scope=\"col\">Rooms</th>\n              <th />\n            </tr>\n          </thead>\n          <tbody>{this.renderRooms()}</tbody>\n        </table>\n        <div className=\"container1\">\n          <div className=\"rooms-container\">\n            <input\n              type=\"text\"\n              placeholder=\"Create room\"\n              value={this.state.roomName}\n              onChange={this.handleChange}\n            />\n            <Button color=\"info\" onClick={this.createRoom}>\n              Create\n            </Button>\n          </div>\n          {this.state.errors && (\n            <p className=\"error-container\">\n              <small>{this.state.errors}</small>\n            </p>\n          )}\n          {this.state.success && (\n            <p className=\"success-container\">\n              <small>{this.state.errors}</small>\n            </p>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Rooms\n","import React, { Component } from 'react'\nclass Landing extends Component {\n  render() {\n    return (\n      <div className=\"landing\">\n        <div className=\"dark-overlay landing-inner\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-12 text-center\">\n                <h1 className=\"display-3 mb-4\">Chat App</h1>\n                <p className=\"lead\">\n                  Welcome to a Chat App using React and Socket.IO\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Landing\n","import React, { Component } from 'react'\nimport './Users.styles.css'\nimport { Button } from 'reactstrap'\n\nclass Users extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      userName: '',\n      users: [],\n      errors: '',\n      success: '',\n    }\n  }\n\n  componentDidMount() {\n    fetch('/user/get/all')\n      .then(res => res.json())\n      .then(users => {\n        this.setState({\n          users: users,\n        })\n      })\n\n    let { socket } = this.props\n\n    socket.on('registerSuccess', data => {\n      let { users } = this.state\n      users.push(data.newUser)\n      this.setState({\n        users: users,\n        success: data.message,\n        errors: '',\n      })\n    })\n  }\n\n  renderUsers = () => {\n    return this.state.users.map((user, index) => {\n      return (\n        <tr key={index}>\n          <th scope=\"row\">{index + 1}</th>\n          <td>{user.name}</td>\n        </tr>\n      )\n    })\n  }\n\n  handleChange = e => {\n    this.setState({\n      userName: e.target.value,\n    })\n  }\n\n  registerUser = () => {\n    let { socket } = this.props\n    let { userName } = this.state\n\n    socket.emit('registerUser', {\n      name: userName,\n    })\n\n    socket.on('registerFail', data => {\n      this.setState({\n        errors: data.message,\n        success: '',\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <table class=\"table users-table-container\">\n          <thead class=\"thead-dark\">\n            <tr>\n              <th scope=\"col\">#</th>\n              <th scope=\"col\">Users</th>\n            </tr>\n          </thead>\n          <tbody>{this.renderUsers()}</tbody>\n        </table>\n        <div class=\"container1\">\n          <div class=\"users-container\">\n            <input\n              type=\"text\"\n              placeholder=\"Create user\"\n              value={this.state.roomName}\n              onChange={this.handleChange}\n            />\n            <Button color=\"info\" onClick={this.registerUser}>\n              Register\n            </Button>\n          </div>\n          {this.state.errors && (\n            <p class=\"error-container\">\n              <small>{this.state.errors}</small>\n            </p>\n          )}\n          {this.state.success && (\n            <p class=\"success-container\">\n              <small>{this.state.errors}</small>\n            </p>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Users\n","import React, { Component } from 'react'\nimport './ChatWindow.styles.css'\nimport { Container, Row, Col, Button } from 'reactstrap'\nimport { Link } from 'react-router-dom'\n\nclass ChatWindow extends Component {\n  constructor() {\n    super()\n    this.state = {\n      roomName: '',\n      userName: '',\n      message: '',\n      activeUsers: [],\n      events: [],\n      messageLog: [],\n      error: '',\n    }\n  }\n\n  componentDidMount() {\n    let roomName = this.props.match.params.name.replace('%20', ' ')\n    let userName = this.props.match.params.username\n    let activeUsers = this.state.activeUsers\n    this.setState({\n      roomName: roomName,\n      userName: userName,\n    })\n    let { socket } = this.props\n\n    // Get Chat History\n    fetch(`/room/get/${roomName}`)\n      .then(res => res.json())\n      .then(room => {\n        // Get Message History\n        let messageLog = []\n        room.chatHistories.map(message => {\n          messageLog.push({\n            message: `${message.userName}: ${message.message}`,\n            timeStamp: message.timestamp,\n          })\n        })\n        // Get Event History\n        let events = []\n        room.eventHistories.map(event => {\n          if (event.type === 'JOIN_ROOM') {\n            events.unshift({\n              event: `${event.username} joined this room`,\n              timeStamp: event.timeStamp,\n            })\n          } else if (event.type === 'LEAVE_ROOM') {\n            events.unshift({\n              event: `${event.username} left this room`,\n              timeStamp: event.timeStamp,\n            })\n          }\n        })\n        //console.log(messageLog);\n        this.setState({\n          messageLog: messageLog,\n          events: events,\n        })\n      })\n\n    socket.on('chat', data => {\n      let messageLog = this.state.messageLog\n      messageLog.push({\n        message: `${data.user}: ${data.message}`,\n        timeStamp: data.timeStamp,\n      })\n      // Check if in activeUsers\n      let activeUsers = this.state.activeUsers\n      if (!this.isActiveUser(data.user)) {\n        activeUsers.push({ name: data.user })\n      }\n      this.setState({\n        messageLog: messageLog,\n        activeUsers: activeUsers,\n      })\n    })\n\n    // Timestamp for event\n    let d = new Date()\n    let date = d.toLocaleDateString()\n    let time = d.toLocaleTimeString()\n    let timeStamp = date + ' ' + time\n    // Send activeUser to other members in the group\n    socket.emit('activeUser', {\n      userName: userName,\n      roomName: roomName,\n      date: date,\n      time: time,\n      timeStamp: timeStamp,\n    })\n\n    // Listen to leftGroup event, then add to event list\n    socket.on('leftGroup', data => {\n      let events = this.state.events\n      events.unshift({\n        event: `${data.userName} has left this room`,\n        timeStamp: data.timeStamp,\n      })\n      this.setState({\n        events: events,\n      })\n      if (this.isActiveUser) this.removeActiveUser(data.userName)\n    })\n\n    // Listen to activeUser event when new user joins the group\n    socket.on('activeUser', data => {\n      // let activeUsers = this.state.activeUsers\n      let events = this.state.events\n      activeUsers.push({ name: data.userName })\n      events.unshift({\n        event: `${data.userName} joined this room`,\n        timeStamp: data.timeStamp,\n      })\n      this.setState({\n        activeUsers: activeUsers,\n        events: events,\n      })\n    })\n  }\n\n  componentWillUnmount() {\n    // Announce other members in the group \"user left the group\"\n    let { socket } = this.props\n    let d = new Date()\n    let date = d.toLocaleDateString()\n    let time = d.toLocaleTimeString()\n    let timeStamp = date + ' ' + time\n    socket.emit('leftGroup', {\n      roomName: this.state.roomName,\n      userName: this.state.userName,\n      date: date,\n      time: time,\n      timeStamp: timeStamp,\n    })\n  }\n\n  // Check if user is in this.state.activeUsers\n  isActiveUser = username => {\n    for (let user of this.state.activeUsers) {\n      if (user.name === username) return true\n    }\n    return false\n  }\n\n  // Remove user from activeUsers list\n  removeActiveUser = username => {\n    let activeUsers = this.state.activeUsers\n    for (let i = 0; i < activeUsers.length; i++) {\n      if (activeUsers[i].name === username) activeUsers.splice(i, 1)\n    }\n    this.setState({\n      activeUsers: activeUsers,\n    })\n  }\n\n  getActiveUsers = () => {\n    return this.state.activeUsers.map((user, index) => {\n      return (\n        <p key={index}>\n          <span className=\"dot dot-success\" /> {user.name}\n        </p>\n      )\n    })\n  }\n\n  getEvents = () => {\n    return this.state.events.map((event, index) => {\n      return <div key={index}>{`[${event.timeStamp}]  ${event.event}`}</div>\n    })\n  }\n\n  // Tam - Username is set by default\n  // nameChange = e => {\n  //   this.setState({\n  //     userName: e.target.value,\n  //   })\n  // }\n\n  messageChange = e => {\n    this.setState({\n      message: e.target.value,\n    })\n  }\n\n  getMessages = () => {\n    return this.state.messageLog.map((message, index) => {\n      return (\n        <div key={index}>\n          <span className=\"mw\">{message.message} </span>\n          <div className=\"right-0\">\n            <i> {message.timeStamp}</i>{' '}\n          </div>\n        </div>\n      )\n    })\n  }\n\n  handleSend = roomName => {\n    let { socket } = this.props\n    let d = new Date()\n    let date = d.toLocaleDateString()\n    let time = d.toLocaleTimeString()\n    let timeStamp = date + ' ' + time\n    // console.log(timeStamp);\n    socket.emit('chat', {\n      room: roomName,\n      user: this.state.userName,\n      message: this.state.message,\n      timeStamp: timeStamp,\n      date: date,\n      time: time,\n    })\n    // Tam - not gonna check for now\n    // socket.emit('checkHandle', {\n    //   user: this.state.userName,\n    // })\n\n    // socket.on('checkFail', data => {\n    //   this.setState({\n    //     error: data.message,\n    //   })\n    // })\n  }\n\n  render() {\n    return (\n      <Container>\n        <h1> Room {this.state.roomName}</h1>\n        <Link to={`/rooms`}>\n          <Button className=\"leaveBtn\" color=\"secondary\">\n            Leave Room\n          </Button>\n        </Link>\n        <Row>\n          <Col xs=\"3\">\n            <div className=\"window\">\n              <div className=\"window-head\">\n                <h2>Active User</h2>\n              </div>\n              <div className=\"list\">{this.getActiveUsers()}</div>\n            </div>\n          </Col>\n          <Col>\n            <div id=\"mario-chat\">\n              <h2>Chat</h2>\n              <div id=\"chat-window\">\n                <div id=\"output\">{this.getMessages()}</div>\n              </div>\n              <input\n                id=\"handle\"\n                type=\"text\"\n                placeholder=\"Handle\"\n                //onChange={this.nameChange}\n                value={`Username: ${this.state.userName}`}\n                disabled\n              />\n              <input\n                id=\"message\"\n                type=\"text\"\n                placeholder=\"Message\"\n                onChange={this.messageChange}\n              />\n              <button\n                id=\"send\"\n                onClick={() => this.handleSend(this.state.roomName)}\n              >\n                Send\n              </button>\n            </div>\n          </Col>\n          <Col xs=\"4\">\n            <div className=\"window\">\n              <div className=\"window-head\">\n                <h2>Room History</h2>\n              </div>\n              <div className=\"list\">{this.getEvents()}</div>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default ChatWindow\n","import React, { Component } from 'react'\nimport { Container, Table } from 'reactstrap'\nimport './EventHistory.styles.css'\n\nclass EventHistory extends Component {\n  constructor() {\n    super()\n    this.state = {\n      rooms: [],\n    }\n  }\n\n  componentDidMount() {\n    // Get all rooms\n    fetch('/room/get/all')\n      .then(res => res.json())\n      .then(rooms => {\n        this.setState({\n          rooms: rooms,\n        })\n      })\n  }\n\n  renderRoomEvents = room => {\n    return room.eventHistories.map((event, index) => {\n      return (\n        <tr key={index}>\n          <th> {index + 1} </th>\n          <td> {event.username} </td>\n          <td> {event.type} </td>\n          <td> {event.date} </td>\n          <td> {event.time} </td>\n        </tr>\n      )\n    })\n  }\n\n  renderEvents = () => {\n    return this.state.rooms.map((room, index) => {\n      return (\n        <div key={index}>\n          <h2> Room: {room.name}</h2>\n          <Table striped>\n            <thead>\n              <tr>\n                <th> # </th>\n                <th> User </th>\n                <th> Type </th>\n                <th> Date </th>\n                <th> Time </th>\n              </tr>\n            </thead>\n            <tbody>{this.renderRoomEvents(room)}</tbody>\n          </Table>\n        </div>\n      )\n    })\n  }\n\n  render() {\n    return (\n      <Container>\n        <h1> Event History</h1>\n        <div>{this.renderEvents()}</div>\n      </Container>\n    )\n  }\n}\n\nexport default EventHistory\n","import React, { Component } from 'react'\nimport { Container, Table } from 'reactstrap'\nimport './EventHistory.styles.css'\n\nclass ChatHistory extends Component {\n  constructor() {\n    super()\n    this.state = {\n      rooms: [],\n    }\n  }\n\n  componentDidMount() {\n    // Get all rooms\n    fetch('/room/get/all')\n      .then(res => res.json())\n      .then(rooms => {\n        this.setState({\n          rooms: rooms,\n        })\n      })\n  }\n\n  renderRoomChat = room => {\n    return room.chatHistories.map((message, index) => {\n      return (\n        <tr key={index}>\n          <th> {index + 1} </th>\n          <td> {message.userName} </td>\n          <td> {message.message} </td>\n          <td> {message.date} </td>\n          <td> {message.time} </td>\n        </tr>\n      )\n    })\n  }\n\n  renderChats = () => {\n    return this.state.rooms.map((room, index) => {\n      return (\n        <div key={index}>\n          <h2> Room: {room.name}</h2>\n          <Table striped>\n            <thead>\n              <tr>\n                <th> # </th>\n                <th> Sender </th>\n                <th> Message </th>\n                <th> Date </th>\n                <th> Time </th>\n              </tr>\n            </thead>\n            <tbody>{this.renderRoomChat(room)}</tbody>\n          </Table>\n        </div>\n      )\n    })\n  }\n\n  render() {\n    return (\n      <Container>\n        <h1> Chat History </h1>\n        <div> {this.renderChats()}</div>\n      </Container>\n    )\n  }\n}\n\nexport default ChatHistory\n","import React, { Component } from 'react'\nimport './App.css'\nimport NavBar from './components/NavBar'\nimport Rooms from './components/Rooms'\nimport Landing from './components/Landing'\nimport Users from './components/Users'\nimport ChatWindow from './components/ChatWindow'\nimport { Route, Switch } from 'react-router-dom'\nimport socketIOClient from 'socket.io-client'\nimport EventHistory from './components/EventHistory'\nimport ChatHistory from './components/ChatHistory'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      socket: socketIOClient('/'),\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar />\n        <Switch>\n          <Route exact path=\"/\" component={Landing} />\n          <Route\n            path=\"/rooms\"\n            render={() => <Rooms socket={this.state.socket} />}\n          />\n          <Route\n            path=\"/users\"\n            render={() => <Users socket={this.state.socket} />}\n          />\n          <Route\n            path=\"/chat/:name&:username\"\n            render={props => (\n              <ChatWindow {...props} socket={this.state.socket} />\n            )}\n          />\n          <Route path=\"/eventHistory\" component={EventHistory} />\n          <Route path=\"/chatHistory\" component={ChatHistory} />\n        </Switch>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}